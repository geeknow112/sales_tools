AWSTemplateFormatVersion: '2010-09-09'
Description: 'Sales Tools API CodePipeline with PR Merge Detection Webhook'

Parameters:
  GitHubOwner:
    Type: String
    Default: geeknow112
    Description: GitHub repository owner
    
  GitHubRepo:
    Type: String
    Default: sales_tools
    Description: GitHub repository name
    
  GitHubToken:
    Type: String
    NoEcho: true
    Description: GitHub Personal Access Token
    
  SalesToolsApiKey:
    Type: String
    NoEcho: true
    Description: Sales Tools API Key
    
  LambdaFunctionName:
    Type: String
    Default: sales-tools-api-function
    Description: Lambda function name

Resources:
  # S3 Bucket for CodePipeline artifacts
  ArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-artifacts-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  # CodeBuild Service Role
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-codebuild-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub 'arn:aws:s3:::${ArtifactsBucket}/*'
              - Effect: Allow
                Action:
                  - lambda:UpdateFunctionCode
                  - lambda:UpdateFunctionConfiguration
                  - lambda:GetFunction
                Resource: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaFunctionName}'

  # CodePipeline Service Role
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-codepipeline-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetBucketVersioning
                Resource:
                  - !Sub 'arn:aws:s3:::${ArtifactsBucket}/*'
                  - !Sub 'arn:aws:s3:::${ArtifactsBucket}'
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource: !GetAtt CodeBuildProject.Arn

  # CodeBuild Project (依存関係対応版)
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${AWS::StackName}-build'
      Description: 'Build project for Sales Tools API - PR Merge Triggered'
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        EnvironmentVariables:
          - Name: SALES_TOOLS_API_KEY
            Value: !Ref SalesToolsApiKey
          - Name: LAMBDA_FUNCTION_NAME
            Value: !Ref LambdaFunctionName
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.9
              commands:
                - echo "=== PR Merge Triggered Build Started ==="
                - echo "Build triggered by PR merge to main branch"
                - echo "Installing system dependencies..."
                - pip install --upgrade pip
            pre_build:
              commands:
                - echo "=== Installing Python dependencies ==="
                - pip install -r requirements.txt -t src/
                - echo "=== Running tests ==="
                - python -m pytest tests/unit/ -v --cov=src --cov-report=term-missing || echo "Tests completed with warnings"
                - echo "=== Code linting ==="
                - flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics || echo "Linting completed with warnings"
            build:
              commands:
                - echo "=== Packaging Lambda function with dependencies ==="
                - cd src
                - echo "Cleaning up Python cache files..."
                - find . -name "*.pyc" -delete
                - find . -name "__pycache__" -type d -exec rm -rf {} + || true
                - echo "Creating deployment package..."
                - zip -r ../lambda-deployment.zip . -x "tests/*" "*.pyc" "__pycache__/*"
                - cd ..
                - echo "Package created successfully:"
                - ls -lh lambda-deployment.zip
                - echo "Package contents (first 30 files):"
                - unzip -l lambda-deployment.zip | head -30
            post_build:
              commands:
                - echo "=== Deploying to Lambda ==="
                - |
                  if aws lambda get-function --function-name $LAMBDA_FUNCTION_NAME 2>/dev/null; then
                    echo "✅ Lambda function exists, updating code..."
                    aws lambda update-function-code \
                      --function-name $LAMBDA_FUNCTION_NAME \
                      --zip-file fileb://lambda-deployment.zip
                    
                    echo "✅ Updating Lambda configuration..."
                    aws lambda update-function-configuration \
                      --function-name $LAMBDA_FUNCTION_NAME \
                      --environment Variables="{SALES_TOOLS_API_KEY=$SALES_TOOLS_API_KEY}" \
                      --timeout 30 \
                      --memory-size 256
                    
                    echo "✅ Lambda function updated successfully!"
                  else
                    echo "❌ Lambda function not found: $LAMBDA_FUNCTION_NAME"
                    exit 1
                  fi
                - echo "=== Testing updated Lambda function ==="
                - |
                  echo "Waiting for Lambda function to be ready..."
                  sleep 15
                  
                  echo "Testing Lambda function..."
                  aws lambda invoke \
                    --function-name $LAMBDA_FUNCTION_NAME \
                    --payload '{"action": "status", "source": "pr_merge_build"}' \
                    test-response.json
                  
                  echo "Lambda test response:"
                  cat test-response.json
                  
                  # Check if response contains success indicator
                  if grep -q '"statusCode": 200' test-response.json; then
                    echo "✅ Lambda function test: SUCCESS"
                  else
                    echo "⚠️ Lambda function test: Check response above"
                  fi
                - echo "=== PR Merge Build Completed Successfully! ==="
          artifacts:
            files:
              - lambda-deployment.zip
              - test-response.json
      TimeoutInMinutes: 25

  # CodePipeline with PR Merge Detection
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: sales-tools-pipeline
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactsBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: main
                OAuthToken: !Ref GitHubToken
                PollForSourceChanges: false  # Webhookを使用
              OutputArtifacts:
                - Name: SourceOutput
                
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput

  # GitHub Webhook for PR Merge Detection
  GitHubWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Name: !Sub '${AWS::StackName}-pr-merge-webhook'
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Ref GitHubToken
      Filters:
        # mainブランチへのプッシュのみ検知
        - JsonPath: "$.ref"
          MatchEquals: refs/heads/main
        # 対象リポジトリの確認
        - JsonPath: "$.repository.name"
          MatchEquals: !Ref GitHubRepo
        # PRマージによるプッシュかどうかを確認（オプション）
        - JsonPath: "$.head_commit.message"
          MatchEquals: "*"  # すべてのコミットメッセージを許可
      TargetPipeline: !Ref CodePipeline
      TargetAction: SourceAction
      TargetPipelineVersion: !GetAtt CodePipeline.Version
      RegisterWithThirdParty: true

  # Lambda Function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Lambda Function
  SalesToolsLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Runtime: python3.9
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import time
          def lambda_handler(event, context):
              return {
                  'statusCode': 200,
                  'body': json.dumps({
                      'message': 'Sales Tools API - PR Merge Auto Deploy',
                      'version': '1.2.0',
                      'pr_merge_webhook': True,
                      'deployment_trigger': 'PR merge to main branch',
                      'timestamp': time.strftime("%Y-%m-%d %H:%M:%S"),
                      'event': event
                  })
              }
      Environment:
        Variables:
          SALES_TOOLS_API_KEY: !Ref SalesToolsApiKey
      Timeout: 30
      MemorySize: 256

Outputs:
  PipelineName:
    Description: Name of the CodePipeline
    Value: !Ref CodePipeline
    Export:
      Name: !Sub '${AWS::StackName}-PipelineName'
      
  PipelineUrl:
    Description: URL of the CodePipeline
    Value: !Sub 'https://console.aws.amazon.com/codesuite/codepipeline/pipelines/${CodePipeline}/view'
    
  WebhookUrl:
    Description: GitHub Webhook URL for PR Merge Detection
    Value: !GetAtt GitHubWebhook.Url
    
  LambdaFunctionName:
    Description: Name of the Lambda function
    Value: !Ref SalesToolsLambdaFunction
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionName'
      
  LambdaFunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt SalesToolsLambdaFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaArn'
      
  ArtifactsBucket:
    Description: S3 bucket for pipeline artifacts
    Value: !Ref ArtifactsBucket
    Export:
      Name: !Sub '${AWS::StackName}-ArtifactsBucket'
      
  WebhookFilters:
    Description: Webhook filters for PR merge detection
    Value: "refs/heads/main + repository.name + head_commit.message"
