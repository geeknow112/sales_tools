name: Sales Tools CI/CD Pipeline

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]
  push:
    branches: [ main ]

env:
  AWS_REGION: ap-northeast-1
  CODEPIPELINE_NAME: sales-tools-pipeline

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: Run unit tests
      run: |
        python -m pytest tests/unit/ -v --cov=src --cov-report=term-missing
        
    - name: Lint code
      run: |
        pip install flake8
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        
    - name: Test Lambda function
      env:
        SALES_TOOLS_API_KEY: ${{ secrets.SALES_TOOLS_API_KEY_TEST }}
      run: |
        cd src
        python -c "
        try:
            from lambda_function import lambda_handler
            event = {'action': 'status'}
            result = lambda_handler(event, None)
            print('Lambda test:', 'PASS' if result['statusCode'] == 200 else 'FAIL')
        except Exception as e:
            print('Lambda test: FAIL -', str(e))
        "

  deploy:
    name: Trigger CodePipeline
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: []
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Trigger CodePipeline
      run: |
        echo "Triggering CodePipeline: ${{ env.CODEPIPELINE_NAME }}"
        aws codepipeline start-pipeline-execution \
          --name ${{ env.CODEPIPELINE_NAME }} \
          --region ${{ env.AWS_REGION }}
        
    - name: Wait for pipeline status
      run: |
        echo "Waiting for pipeline execution..."
        sleep 30
        
        # Get latest execution
        EXECUTION_ID=$(aws codepipeline list-pipeline-executions \
          --pipeline-name ${{ env.CODEPIPELINE_NAME }} \
          --max-items 1 \
          --query 'pipelineExecutionSummaries[0].pipelineExecutionId' \
          --output text)
        
        echo "Pipeline Execution ID: $EXECUTION_ID"
        
        # Monitor execution status
        for i in {1..30}; do
          STATUS=$(aws codepipeline get-pipeline-execution \
            --pipeline-name ${{ env.CODEPIPELINE_NAME }} \
            --pipeline-execution-id $EXECUTION_ID \
            --query 'pipelineExecution.status' \
            --output text)
          
          echo "Pipeline Status: $STATUS"
          
          if [ "$STATUS" = "Succeeded" ]; then
            echo "‚úÖ Pipeline execution succeeded!"
            break
          elif [ "$STATUS" = "Failed" ]; then
            echo "‚ùå Pipeline execution failed!"
            exit 1
          elif [ "$STATUS" = "Stopped" ]; then
            echo "‚èπÔ∏è Pipeline execution stopped!"
            exit 1
          fi
          
          echo "Waiting... ($i/30)"
          sleep 30
        done

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && github.event_name == 'push'
    
    steps:
    - name: Notify Success
      if: needs.deploy.result == 'success'
      run: |
        echo "üéâ Deployment successful!"
        echo "Sales Tools API has been deployed to AWS Lambda"
        
    - name: Notify Failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "‚ùå Deployment failed!"
        echo "Please check the CodePipeline logs for details"
